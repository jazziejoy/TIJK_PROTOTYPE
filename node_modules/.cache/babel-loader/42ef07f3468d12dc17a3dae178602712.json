{"ast":null,"code":"import EventEmitter from \"eventemitter3\";\nimport { XMLHttpRequest } from \"xhr2-cookies\";\nimport { getFromWindow } from \"@walletconnect/utils\";\nconst XHR = getFromWindow(\"XMLHttpRequest\") || XMLHttpRequest;\n\nclass HTTPConnection extends EventEmitter {\n  constructor(url) {\n    super();\n    this.url = url;\n  }\n\n  formatError(payload, message) {\n    let code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    return {\n      error: {\n        message,\n        code\n      },\n      id: payload.id,\n      jsonrpc: payload.jsonrpc\n    };\n  }\n\n  send(payload, internal) {\n    return new Promise(resolve => {\n      if (payload.method === \"eth_subscribe\") {\n        const error = this.formatError(payload, \"Subscriptions are not supported by this HTTP endpoint\");\n        this.emit(\"error\", error);\n        return resolve(error);\n      }\n\n      const xhr = new XHR();\n      let responded = false;\n\n      const res = (err, result) => {\n        if (!responded) {\n          xhr.abort();\n          responded = true;\n\n          if (internal) {\n            internal(err, result);\n          } else {\n            const {\n              id,\n              jsonrpc\n            } = payload;\n            const response = err ? {\n              id,\n              jsonrpc,\n              error: {\n                message: err.message,\n                code: err.code\n              }\n            } : {\n              id,\n              jsonrpc,\n              result\n            };\n            this.emit(\"payload\", response);\n            resolve(response);\n          }\n        }\n      };\n\n      xhr.open(\"POST\", this.url, true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.timeout = 60 * 1000;\n      xhr.onerror = res;\n      xhr.ontimeout = res;\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          try {\n            const response = JSON.parse(xhr.responseText);\n            res(response.error, response.result);\n          } catch (e) {\n            res(e);\n          }\n        }\n      };\n\n      xhr.send(JSON.stringify(payload));\n    });\n  }\n\n}\n\nexport default HTTPConnection;","map":{"version":3,"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,SAASC,aAAT,QAA8B,sBAA9B;AAIA,MAAMC,GAAG,GAAGD,aAAa,CAAwB,gBAAxB,CAAb,IAA0DD,cAAtE;;AAIA,MAAMG,cAAN,SAA6BJ,YAA7B,CAAyC;AAGvCK,cAAYC,GAAZ,EAAuB;AACrB;AACA,SAAKA,GAAL,GAAWA,GAAX;AACD;;AAEDC,aAAW,CAACC,OAAD,EAAeC,OAAf,EAAyC;AAAA,QAATC,IAAS,uEAAF,CAAC,CAAC;AAClD,WAAO;AACLC,WAAK,EAAE;AAAEF,eAAF;AAAWC;AAAX,OADF;AAELE,QAAE,EAAEJ,OAAO,CAACI,EAFP;AAGLC,aAAO,EAAEL,OAAO,CAACK;AAHZ,KAAP;AAKD;;AAEMC,MAAI,CAACN,OAAD,EAAeO,QAAf,EAA6B;AACtC,WAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAG;AAC3B,UAAIT,OAAO,CAACU,MAAR,KAAmB,eAAvB,EAAwC;AACtC,cAAMP,KAAK,GAAG,KAAKJ,WAAL,CACZC,OADY,EAEZ,uDAFY,CAAd;AAIA,aAAKW,IAAL,CAAU,OAAV,EAAmBR,KAAnB;AACA,eAAOM,OAAO,CAACN,KAAD,CAAd;AACD;;AACD,YAAMS,GAAG,GAAG,IAAIjB,GAAJ,EAAZ;AAEA,UAAIkB,SAAS,GAAG,KAAhB;;AAEA,YAAMC,GAAG,GAAG,CAACC,GAAD,EAAcC,MAAd,KAA8B;AACxC,YAAI,CAACH,SAAL,EAAgB;AACdD,aAAG,CAACK,KAAJ;AACAJ,mBAAS,GAAG,IAAZ;;AACA,cAAIN,QAAJ,EAAc;AACZA,oBAAQ,CAACQ,GAAD,EAAMC,MAAN,CAAR;AACD,WAFD,MAEO;AACL,kBAAM;AAAEZ,gBAAF;AAAMC;AAAN,gBAAkBL,OAAxB;AACA,kBAAMkB,QAAQ,GAAGH,GAAG,GAChB;AAAEX,gBAAF;AAAMC,qBAAN;AAAeF,mBAAK,EAAE;AAAEF,uBAAO,EAAEc,GAAG,CAACd,OAAf;AAAwBC,oBAAI,EAAEa,GAAG,CAACb;AAAlC;AAAtB,aADgB,GAEhB;AAAEE,gBAAF;AAAMC,qBAAN;AAAeW;AAAf,aAFJ;AAGA,iBAAKL,IAAL,CAAU,SAAV,EAAqBO,QAArB;AACAT,mBAAO,CAACS,QAAD,CAAP;AACD;AACF;AACF,OAfD;;AAiBAN,SAAG,CAACO,IAAJ,CAAS,MAAT,EAAiB,KAAKrB,GAAtB,EAA2B,IAA3B;AACAc,SAAG,CAACQ,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACAR,SAAG,CAACS,OAAJ,GAAc,KAAK,IAAnB;AACAT,SAAG,CAACU,OAAJ,GAAcR,GAAd;AACAF,SAAG,CAACW,SAAJ,GAAgBT,GAAhB;;AACAF,SAAG,CAACY,kBAAJ,GAAyB,MAAK;AAC5B,YAAIZ,GAAG,CAACa,UAAJ,KAAmB,CAAvB,EAA0B;AACxB,cAAI;AACF,kBAAMP,QAAQ,GAAGQ,IAAI,CAACC,KAAL,CAAWf,GAAG,CAACgB,YAAf,CAAjB;AACAd,eAAG,CAACI,QAAQ,CAACf,KAAV,EAAiBe,QAAQ,CAACF,MAA1B,CAAH;AACD,WAHD,CAGE,OAAOa,CAAP,EAAU;AACVf,eAAG,CAACe,CAAD,CAAH;AACD;AACF;AACF,OATD;;AAUAjB,SAAG,CAACN,IAAJ,CAASoB,IAAI,CAACI,SAAL,CAAe9B,OAAf,CAAT;AACD,KA9CM,CAAP;AA+CD;;AAhEsC;;AAmEzC,eAAeJ,cAAf","names":["EventEmitter","XMLHttpRequest","getFromWindow","XHR","HTTPConnection","constructor","url","formatError","payload","message","code","error","id","jsonrpc","send","internal","Promise","resolve","method","emit","xhr","responded","res","err","result","abort","response","open","setRequestHeader","timeout","onerror","ontimeout","onreadystatechange","readyState","JSON","parse","responseText","e","stringify"],"sourceRoot":"","sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}